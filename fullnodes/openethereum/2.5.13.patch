diff --git a/ethcore/src/client/client.rs b/ethcore/src/client/client.rs
index 43cf42bbd..3f4e1826e 100644
--- a/ethcore/src/client/client.rs
+++ b/ethcore/src/client/client.rs
@@ -285,7 +285,7 @@ impl Importer {
 		let (imported_blocks, import_results, invalid_blocks, imported, proposed_blocks, duration, has_more_blocks_to_import) = {
 			let mut imported_blocks = Vec::with_capacity(max_blocks_to_import);
 			let mut invalid_blocks = HashSet::new();
-			let mut proposed_blocks = Vec::with_capacity(max_blocks_to_import);
+			let proposed_blocks = Vec::with_capacity(max_blocks_to_import);
 			let mut import_results = Vec::with_capacity(max_blocks_to_import);
 
 			let _import_lock = self.import_lock.lock();
diff --git a/ethcore/src/engines/clique/mod.rs b/ethcore/src/engines/clique/mod.rs
index 65d56fa28..1f9f0e16e 100644
--- a/ethcore/src/engines/clique/mod.rs
+++ b/ethcore/src/engines/clique/mod.rs
@@ -297,8 +297,7 @@ impl Clique {
 						"Back-filling block state. last_checkpoint_number: {}, target: {}({}).",
 						last_checkpoint_number, header.number(), header.hash());
 
-				let mut chain: &mut VecDeque<Header> = &mut VecDeque::with_capacity(
-					(header.number() - last_checkpoint_number + 1) as usize);
+				let mut chain = VecDeque::with_capacity((header.number() - last_checkpoint_number + 1) as usize);
 
 				// Put ourselves in.
 				chain.push_front(header.clone());
@@ -342,7 +341,7 @@ impl Clique {
 
 				// Backfill!
 				let mut new_state = last_checkpoint_state.clone();
-				for item in chain {
+				for item in &chain {
 					new_state.apply(item, false)?;
 				}
 				new_state.calc_next_timestamp(header.timestamp(), self.period)?;
diff --git a/ethcore/src/ethereum/ethash.rs b/ethcore/src/ethereum/ethash.rs
index 698e23cf7..c77ba2cb6 100644
--- a/ethcore/src/ethereum/ethash.rs
+++ b/ethcore/src/ethereum/ethash.rs
@@ -277,7 +277,7 @@ impl Engine<EthereumMachine> for Arc<Ethash> {
 				let n_uncles = block.uncles.len();
 
 				// Bestow block rewards.
-				let mut result_block_reward = reward + reward.shr(5) * U256::from(n_uncles);
+				let result_block_reward = reward + reward.shr(5) * U256::from(n_uncles);
 
 				rewards.push((author, RewardKind::Author, result_block_reward));
 
diff --git a/parity/informant.rs b/parity/informant.rs
index 78d055686..1a25b55de 100644
--- a/parity/informant.rs
+++ b/parity/informant.rs
@@ -259,7 +259,7 @@ impl<T: InformantData> Informant<T> {
 		let elapsed = now.duration_since(*self.last_tick.read());
 
 		let (client_report, full_report) = {
-			let mut last_report = self.last_report.lock();
+			let last_report = self.last_report.lock();
 			let full_report = self.target.report();
 			let diffed = full_report.client_report.clone() - &*last_report;
 			(diffed, full_report)
diff --git a/rpc/src/tests/http_client.rs b/rpc/src/tests/http_client.rs
index 0588c791e..38f2ae93c 100644
--- a/rpc/src/tests/http_client.rs
+++ b/rpc/src/tests/http_client.rs
@@ -113,20 +113,20 @@ pub fn request(address: &SocketAddr, request: &str) -> Response {
 pub fn assert_security_headers_present(headers: &[String], port: Option<u16>) {
 	if port.is_none() {
 		assert!(
-			headers.iter().any(|header| header.as_str() == "X-Frame-Options: SAMEORIGIN")
+			headers.iter().any(|header| header.as_str() == "X-Frame-Options: SAMEORIGIN"),
 			"X-Frame-Options: SAMEORIGIN missing: {:?}", headers
 		);
 	}
 	assert!(
-		headers.iter().any(|header| header.as_str() == "X-XSS-Protection: 1; mode=block")
+		headers.iter().any(|header| header.as_str() == "X-XSS-Protection: 1; mode=block"),
 		"X-XSS-Protection missing: {:?}", headers
 	);
 	assert!(
-		headers.iter().any(|header|  header.as_str() == "X-Content-Type-Options: nosniff")
+		headers.iter().any(|header|  header.as_str() == "X-Content-Type-Options: nosniff"),
 		"X-Content-Type-Options missing: {:?}", headers
 	);
 	assert!(
-		headers.iter().any(|header| header.starts_with("Content-Security-Policy: "))
+		headers.iter().any(|header| header.starts_with("Content-Security-Policy: ")),
 		"Content-Security-Policy missing: {:?}", headers
 	)
 }
diff --git a/rpc/src/v1/helpers/dispatch/prospective_signer.rs b/rpc/src/v1/helpers/dispatch/prospective_signer.rs
index 034d19dc6..6d4b47089 100644
--- a/rpc/src/v1/helpers/dispatch/prospective_signer.rs
+++ b/rpc/src/v1/helpers/dispatch/prospective_signer.rs
@@ -129,7 +129,7 @@ impl<P: PostSign> Future for ProspectiveSigner<P> {
 						.into_future());
 				},
 				WaitForPostSign => {
-					if let Some(mut fut) = self.post_sign_future.as_mut() {
+					if let Some(fut) = self.post_sign_future.as_mut() {
 						match fut.poll()? {
 							Async::Ready(item) => {
 								let nonce = self.ready
